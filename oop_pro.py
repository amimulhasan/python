# -*- coding: utf-8 -*-
"""oop_pro.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BNcCSlDkIQpLC8vJd11JKuQOyF2m1XSm
"""

class Student:
  name='Keras'
s1=Student()
print(s1.name)

class Car:
  color='blue'
  brand='marcedes'
c1=Car()
print(c1.color)
print(c1.brand)

# constructer...........__init__
class Car:
  def __init__(self,fullname,fullnames):
    self.name=fullname
    self.boy=fullnames
    print('adding new student in Database')

# c1=Car('blue')
# print(c1.name)
# c1=Car('safi')
# print(c1.boy)
# print(c1.brand)
c1=Car('bill','Rafi')
print(c1.name,c1.boy,sep='\n')

class Student:
  college_name='ABC College'
  name='anonymous'
  def __init__(self,name,marks):
      self.name=name   # Obj attr>class attr
      self.mark=marks
      print('adding a new student in database')
s1=Student('keran',78)
print(s1.name,s1.mark)

class Students:
  college_name='ABC college'
  def __init__(self,name,marks):
    self.name=name
    self.mark=marks
  def welcome(self):
    print("Welcome student",self.name)
  def get_marks(self):
    return self.mark
s=Students('Rofik',98)
s.welcome()
s.get_marks()

#static method (Decorator)
class Students:
    college_name='ABC college'
    def __init__(self,name,marks):
      self.name=name
      self.mark=marks
    @staticmethod
    def welcome():
      print("Welcome student")
    def get_marks(self):
      return self.mark
s=Students('Rofik',98)
s.welcome()
s.get_marks()

class Student:
  college_name="ABC college"
  def __init__(self,name,num):
    self.name=name
    self.num=num

  def get_avg(self):
    sum=0
    for val in self.num:
      sum +=val
    print(f"hi {self.name} your avg score is:",sum/3)
s2=Student('Tone stack',[98,97,99])
s2.get_avg()

class Car:
  def __init__(self):
    self.acc=False
    self.brk=False
    self.clutch=False
  def get_start(self):
    self.acc=True
    self.clutch=True
    print('The car is started')
c1=Car()
c1.get_start()

class Account:
  def __init__(self,bal,acc):
    self.balance=bal
    self.account=acc
  def debit(self,amount):
    self.balance -= amount
    print(f'BDT {amount} was debited')
    print(f'your current balance is {self.balance}')
  def cridit(self,amount):
    self.balance +=amount
    print(f"BDT {amount } was cridited")
    print(f'your current balance is {self.balance}')
  # def get_balance(self):
    # return self.balance



a1=Account(10000,123456)
print(a1.balance)
print(a1.account)
a1.debit(50)
a1.cridit(80)





