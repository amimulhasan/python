# -*- coding: utf-8 -*-
"""F_string.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rVN9qWUrBNkkpxZqeAjOH9hjOdv4XzVF
"""

letter='Hey my name is {} and I am from {}'
country='india'
name='Harry'
print(letter.format(country,name))

print(f'hey my name is {name} I am from {country}')

price=49.0999
txt=f'for only {price:0.2f} dollars'
txt

print(f'{2*30}')

print(f'hey my name is {{name}} I am from {{country}}')

# n Python, an f-string (formatted string literal) allows you to embed expressions inside string literals by prefixing the string with the letter f or F. This approach provides a concise and readable way to include variable values or expressions directly in a string. f-strings were introduced in Python 3.6 and have become a popular way to format strings.

# Basic Syntax
# name = "Alice"
# age = 25
# greeting = f"Hello, my name is {name} and I am {age} years old."
# print(greeting)
# Output:

# Hello, my name is Alice and I am 25 years old.
# How It Works
# To create an f-string, prefix the string with f or F.
# Within the curly braces {}, you can insert any valid Python expression, not just variables.
# Python evaluates the expression inside {}, converts it to a string, and inserts it into the output.
# Examples
# Mathematical Expressions:

# a = 5
# b = 10
# result = f"The sum of {a} and {b} is {a + b}."
# print(result)
# Output:

# The sum of 5 and 10 is 15.
# Calling Functions:

# def greet(name):
#     return f"Hello, {name}!"

# greeting = f"{greet('Alice')}, welcome to Python!"
# print(greeting)
# Output:

# Hello, Alice!, welcome to Python!
# Formatting Numbers:

# pi = 3.14159
# formatted = f"Pi to 3 decimal places is {pi:.3f}."
# print(formatted)
# Output:

# Pi to 3 decimal places is 3.142.
# Using Dictionaries and Lists:

# person = {"name": "Bob", "age": 30}
# introduction = f"My name is {person['name']} and I am {person['age']} years old."
# print(introduction)
# Output:

# My name is Bob and I am 30 years old.
# Key Benefits of f-strings
# Readability: f-strings are concise and easy to read, especially for simple string formatting.
# Efficiency: They are faster than other formatting methods like str.format() and %-formatting.
# Flexibility: f-strings allow embedding any expression within {}, making them very powerful.
# Note
# If you need to use curly braces {} in an f-string without them being interpreted as placeholders, double them:

# brackets_example = f"{{This is not a placeholder}}"
# print(brackets_example)
# Output:

# {This is not a placeholder}